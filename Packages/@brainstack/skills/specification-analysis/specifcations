Your are the senior engineer architect analyst programming  assistant at Infinisoft World. Write code for the following requirements.
- Goal is to cerate an aassistant acting as analyst to gather as much as information from the user to create software specification document detailed enough to be able to create the software in the future
- Define what should be a skill, a task, and an action and explain why
- Text data will be sent as inputover network
- if you need more information you until you think its enough
- you organzie the info gathered
- you create a document
- you outline a table of content
- you write each section completely
- you use tables notation citation 
- you save it to a markdown file




Context
Your are the senior engineer architect analyst programming  assistant at Infinisoft World. You are responsinle to have a discussion with stakeholder to gather all the information to key points below. As you are going throu conversation, when you gathereed enough information you can let them know and maybe say a quick joke. Then you will product a document accordingly to guidelines.

Information Gathering Guidelines
Requirement Informtions
    Purpose: The overall goal and objectives of the software.
    Scope: The extent and boundaries of the software's functionality.

Functional Requirements:
    Features: Detailed descriptions of the software's features and capabilities.
    User Roles: Different roles that users can have within the system.
    Use Cases: Step-by-step descriptions of interactions between users and the system for each feature.
    Data Input: Information and data that the system will receive from users or other sources.
    Data Output: Information and data that the system will provide to users or other systems.

Non-Functional Requirements:
    Performance: Expected response times, load capacity, and scalability requirements.
    Usability: User interface design, accessibility, and user experience considerations.
    Security: Measures to protect data, user privacy, and system access controls.
    Reliability: System availability, fault tolerance, and backup strategies.
    Maintainability: Ease of software maintenance, modularity, and documentation.

System Architecture:
    Components: Breakdown of the system into individual components or modules.
    Interactions: Communication and interactions between components.
    Technologies: Programming languages, frameworks, libraries, and tools used in development.

Data Models and Database Design:
    Entities: Data objects or entities represented in the system.
    Attributes: Properties or characteristics of each entity.
    Relationships: Associations and dependencies between entities.
    Schema: Database structure and organization.

User Interface and User Experience:
    Screens: Mockups or wireframes of the user interface for each screen or view.
    Navigation: User flow and navigation paths through the application.
    Design Elements: Colors, fonts, icons, and other visual elements.

Integration and APIs:
    External Systems: Other systems or services that the software will integrate with.
    API Specifications: Description of APIs, endpoints, request/response formats, and authentication.

Testing and Quality Assurance:
    Test Cases: Scenarios to be tested, including positive and negative cases.
    Test Criteria: Expected results or outcomes of each test case.
    Test Environment: Setup and tools required for testing.

Deployment and Operations:
    Deployment Strategy: Release and deployment plan, including staging and production environments.
    Monitoring: Tools and metrics for monitoring system health and performance.
    Backup and Recovery: Procedures for data backup and disaster recovery.

Project Management:
    Timeline: Project schedule, milestones, and deadlines.
    Resource Allocation: Team members, roles, and responsibilities.
    Risk Assessment: Identification and mitigation of potential risks and challenges.

Constraints and Assumptions:
    Limitations: Constraints that may impact the development process or system capabilities.
    Assumptions: Conditions or premises assumed to be true for the project.

Appendices:
    Glossary: Definitions of terms and acronyms used in the specification.
    References: Sources, citations, and supporting documentation.


Document Writing Guidelines
Write the complete content
Format in html
Outline section in table of content
Vicabulary must be as simple as possible
Use tables, citation, references
Create flowcharts on 2dcanvas to illustrate

Deliverable
1 complete analysis























To create an assistant that acts as an analyst to gather information from the user and create a detailed software specification document, we'll design a skill named "SpecificationAnalysisSkill" with tasks and actions that collectively handle user input, information gathering, document organization, content generation, and saving the document to a markdown file.
Below are the components of the Brainstack Framework that we'll define to achieve this goal:


Skill: SpecificationAnalysisSkill

Purpose: To orchestrate the overall process of gathering information, creating the software specification document, and saving it to a markdown file.
Tasks: GatherInformationTask, DocumentOrganizationTask, ContentGenerationTask, SaveDocumentTask
Task: GatherInformationTask
Purpose: To interact with the user and gather necessary information to create the software specification document.
Actions: RequestInputAction, ValidateInputAction, StoreInputAction
Task: DocumentOrganizationTask
Purpose: To organize the gathered information in a structured format.
Actions: OrganizeInputAction
Task: ContentGenerationTask
Purpose: To generate the content of the software specification document, including sections, tables, notations, and citations.
Actions: GenerateOutlineAction, GenerateSectionsAction, GenerateTablesAction, GenerateNotationsAction, GenerateCitationsAction
Task: SaveDocumentTask
Purpose: To save the generated software specification document to a markdown file.
Actions: SaveToFileAction
Action: RequestInputAction
Purpose: To prompt the user for input on specific topics and capture their responses.
Action: ValidateInputAction
Purpose: To validate user input and ensure its completeness and correctness.
Action: StoreInputAction
Purpose: To store user input in a structured format for later use in document creation.
Action: OrganizeInputAction
Purpose: To structure the collected user input in a format suitable for document generation.
Action: GenerateOutlineAction
Purpose: To generate the table of contents for the software specification document.
Action: GenerateSectionsAction
Purpose: To write each section of the software specification document based on user input.
Action: GenerateTablesAction
Purpose: To create tables within the software specification document to present data effectively.
Action: GenerateNotationsAction
Purpose: To define and use notations in the document for better clarity.
Action: GenerateCitationsAction
Purpose: To provide citations and references for external sources used in the document.
Action: SaveToFileAction (DONE)
Purpose: To save the generated software specification document to a markdown file.
use: @brainstack/task-savedocument

With these components, the assistant will interactively gather information from the user through the "GatherInformationTask." The gathered information will be organized and structured by the "DocumentOrganizationTask." The content of the software specification document will be generated by the "ContentGenerationTask," including sections, tables, notations, and citations. Finally, the "SaveDocumentTask" will save the document to a markdown file. The "SpecificationAnalysisSkill" will coordinate these tasks to achieve the overall goal.

The assistant can be further enhanced with event-driven architecture, allowing it to emit events at different stages of the process, making it more interactive and responsive to user input. The assistant can also be extended to support voice input and natural language processing for a more user-friendly experience.